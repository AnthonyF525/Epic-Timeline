package com.epicstuff.dto;

import lombok.Data;
import lombok.Builder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import java.util.List;

@Data
@Builder
public class LocationCreateRequest {
    
    @NotBlank(message = "Name is required")
    @Size(min = 1, max = 200, message = "Name must be between 1 and 200 characters")
    private String name;
    
    @NotBlank(message = "Description is required")
    @Size(min = 10, max = 2000, message = "Description must be between 10 and 2000 characters")
    private String description;
    
    // // [DONE] Coordinate validation (optional)
    @Valid
    private CoordinatesRequest coordinates;
    
    // // [DONE] Boolean flags validation (all required with defaults)
    @NotNull(message = "isRealPlace flag is required")
    private Boolean isRealPlace;
    
    @NotNull(message = "isMythological flag is required")
    private Boolean isMythological;
    
    @NotNull(message = "isModernLocation flag is required")
    private Boolean isModernLocation;
    
    @NotNull(message = "isAccessibleToday flag is required")
    private Boolean isAccessibleToday;
    
    @NotNull(message = "isUnderwater flag is required")
    private Boolean isUnderwater;
    
    @NotNull(message = "isArchaeological flag is required")
    private Boolean isArchaeological;
    
    @NotNull(message = "isTouristDestination flag is required")
    private Boolean isTouristDestination;
    
    @NotNull(message = "hasModernName flag is required")
    private Boolean hasModernName;
    
    // // [DONE] Names validation
    @Size(max = 200, message = "Modern name cannot exceed 200 characters")
    private String modernName;
    
    @Size(max = 200, message = "Ancient name cannot exceed 200 characters")
    private String ancientName;
    
    // // [DONE] Region validation (required)
    @NotNull(message = "Region is required")
    @Valid
    private GeographicRegionRequest region;
    
    // // [DONE] Array validation - alternative names
    @Size(max = 15, message = "Cannot have more than 15 alternative names")
    private List<@NotBlank @Size(max = 100) String> alternativeNames;
    
    // // [DONE] Array validation - notable features
    @Size(max = 20, message = "Cannot have more than 20 notable features")
    private List<@NotBlank @Size(max = 150) String> notableFeatures;
    
    // // [DONE] Array validation - historical periods
    @Size(max = 10, message = "Cannot have more than 10 historical periods")
    private List<@NotBlank @Size(max = 100) String> historicalPeriods;
    
    // // [DONE] Array validation - mythological events
    @Size(max = 15, message = "Cannot have more than 15 mythological events")
    private List<@NotBlank @Size(max = 200) String> mythologicalEvents;
    
    // // [DONE] Array validation - modern landmarks
    @Size(max = 25, message = "Cannot have more than 25 modern landmarks")
    private List<@NotBlank @Size(max = 150) String> modernLandmarks;
    
    // // [DONE] Entity relationships
    @Size(max = 50, message = "Cannot have more than 50 characters")
    private List<@NotNull Long> characterIds;
    
    @Size(max = 100, message = "Cannot have more than 100 events")
    private List<@NotNull Long> eventIds;
    
    @Size(max = 10, message = "Cannot have more than 10 sagas")
    private List<@NotNull Long> sagaIds;
    
    // // [DONE] Travel info validation (optional)
    @Valid
    private TravelInfoRequest travelInfo;
    
    // // [DONE] Cultural significance validation (required)
    @NotNull(message = "Cultural significance is required")
    @Valid
    private CulturalSignificanceRequest culturalSignificance;
}

@Data
@Builder
class CoordinatesRequest {
    @NotNull(message = "Latitude is required")
    @DecimalMin(value = "-90.0", message = "Latitude must be between -90 and 90")
    @DecimalMax(value = "90.0", message = "Latitude must be between -90 and 90")
    private Double latitude;
    
    @NotNull(message = "Longitude is required")
    @DecimalMin(value = "-180.0", message = "Longitude must be between -180 and 180")
    @DecimalMax(value = "180.0", message = "Longitude must be between -180 and 180")
    private Double longitude;
    
    @DecimalMin(value = "-500.0", message = "Altitude must be above -500 meters")
    @DecimalMax(value = "10000.0", message = "Altitude must be below 10000 meters")
    private Double altitude;
    
    @DecimalMin(value = "0.0", message = "Accuracy must be positive")
    @DecimalMax(value = "10000.0", message = "Accuracy cannot exceed 10km")
    private Double accuracy;
    
    @Pattern(regexp = "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z", 
             message = "Timestamp must be in ISO format (yyyy-MM-ddTHH:mm:ssZ)")
    private String timestamp;
}

@Data
@Builder
class GeographicRegionRequest {
    @NotBlank(message = "Region name is required")
    @Size(max = 100, message = "Region name cannot exceed 100 characters")
    private String name;
    
    @NotNull(message = "Region type is required")
    @Pattern(regexp = "sea|land|island|city|region|country", 
             message = "Region type must be: sea, land, island, city, region, or country")
    private String type;
    
    @Size(max = 100, message = "Parent region cannot exceed 100 characters")
    private String parentRegion;
}

@Data
@Builder
class TravelInfoRequest {
    @Size(max = 100, message = "Nearest airport cannot exceed 100 characters")
    private String nearestAirport;
    
    @Size(max = 10, message = "Cannot have more than 10 access methods")
    private List<@NotBlank @Size(max = 50) String> accessMethods;
    
    @Size(max = 100, message = "Best time to visit cannot exceed 100 characters")
    private String bestTimeToVisit;
    
    @Size(max = 100, message = "Visit duration cannot exceed 100 characters")
    private String estimatedVisitDuration;
}

@Data
@Builder
class CulturalSignificanceRequest {
    @NotNull(message = "Cultural importance is required")
    @Pattern(regexp = "low|medium|high|legendary", 
             message = "Cultural importance must be: low, medium, high, or legendary")
    private String importance;
    
    @Size(max = 15, message = "Cannot have more than 15 cultural tags")
    private List<@NotBlank @Size(max = 50) String> culturalTags;
    
    @Size(max = 20, message = "Cannot have more than 20 literary references")
    private List<@NotBlank @Size(max = 200) String> literaryReferences;
}