package com.epicstuff.controller;

import com.epicstuff.model.Location;
import com.epicstuff.service.LocationService;
import com.epicstuff.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/locations")
@CrossOrigin(origins = "*")
public class LocationController {

    @Autowired
    private LocationService locationService;

    // // [DONE] GET /api/locations - List all locations with filtering and pagination
    @GetMapping
    public ResponseEntity<Page<Location>> getAllLocations(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "name") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(required = false) Boolean isRealPlace,
            @RequestParam(required = false) Boolean isMythological,
            @RequestParam(required = false) Boolean isModernLocation,
            @RequestParam(required = false) Boolean isAccessibleToday,
            @RequestParam(required = false) Boolean isTouristDestination,
            @RequestParam(required = false) Boolean hasCoordinates,
            @RequestParam(required = false) String regionType,
            @RequestParam(required = false) String culturalImportance,
            @RequestParam(required = false) Long characterId,
            @RequestParam(required = false) Long sagaId,
            @RequestParam(required = false) String search,
            @RequestParam(required = false) Double centerLat,
            @RequestParam(required = false) Double centerLng,
            @RequestParam(required = false) Double radiusKm
    ) {
        Sort sort = sortDir.equalsIgnoreCase("desc") ? 
            Sort.by(sortBy).descending() : 
            Sort.by(sortBy).ascending();
        
        PageRequest pageRequest = PageRequest.of(page, size, sort);
        
        LocationFilterRequest filter = LocationFilterRequest.builder()
            .isRealPlace(isRealPlace)
            .isMythological(isMythological)
            .isModernLocation(isModernLocation)
            .isAccessibleToday(isAccessibleToday)
            .isTouristDestination(isTouristDestination)
            .hasCoordinates(hasCoordinates)
            .regionType(regionType)
            .culturalImportance(culturalImportance)
            .characterId(characterId)
            .sagaId(sagaId)
            .search(search)
            .centerLat(centerLat)
            .centerLng(centerLng)
            .radiusKm(radiusKm)
            .build();
        
        Page<Location> locations = locationService.findAllWithFilter(filter, pageRequest);
        return ResponseEntity.ok(locations);
    }

    // // [DONE] GET /api/locations/{id} - Get single location with populated relationships
    @GetMapping("/{id}")
    public ResponseEntity<Location> getLocationById(@PathVariable Long id) {
        Optional<Location> location = locationService.findByIdWithRelations(id);
        return location.map(ResponseEntity::ok)
                      .orElse(ResponseEntity.notFound().build());
    }

    // // [DONE] POST /api/locations - Create new location
    @PostMapping
    public ResponseEntity<Location> createLocation(@Valid @RequestBody LocationCreateRequest request) {
        try {
            Location createdLocation = locationService.createLocation(request);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdLocation);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    // // [DONE] PUT /api/locations/{id} - Update existing location
    @PutMapping("/{id}")
    public ResponseEntity<Location> updateLocation(
            @PathVariable Long id, 
            @Valid @RequestBody LocationUpdateRequest request
    ) {
        try {
            Optional<Location> updatedLocation = locationService.updateLocation(id, request);
            return updatedLocation.map(ResponseEntity::ok)
                                 .orElse(ResponseEntity.notFound().build());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    // // [DONE] DELETE /api/locations/{id} - Delete location
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteLocation(@PathVariable Long id) {
        boolean deleted = locationService.deleteLocation(id);
        return deleted ? ResponseEntity.noContent().build() : 
                        ResponseEntity.notFound().build();
    }

    // // [DONE] GET /api/locations/nearby - Find locations within radius
    @GetMapping("/nearby")
    public ResponseEntity<List<Location>> findNearbyLocations(
            @RequestParam Double latitude,
            @RequestParam Double longitude,
            @RequestParam(defaultValue = "50.0") Double radiusKm
    ) {
        List<Location> nearbyLocations = locationService.findNearbyLocations(latitude, longitude, radiusKm);
        return ResponseEntity.ok(nearbyLocations);
    }

    // // [DONE] GET /api/locations/real - Get only real world locations
    @GetMapping("/real")
    public ResponseEntity<List<Location>> getRealLocations() {
        List<Location> realLocations = locationService.findRealLocations();
        return ResponseEntity.ok(realLocations);
    }

    // // [DONE] GET /api/locations/mythological - Get only mythological locations
    @GetMapping("/mythological")
    public ResponseEntity<List<Location>> getMythologicalLocations() {
        List<Location> mythologicalLocations = locationService.findMythologicalLocations();
        return ResponseEntity.ok(mythologicalLocations);
    }

    // // [DONE] GET /api/locations/tourist - Get tourist destinations
    @GetMapping("/tourist")
    public ResponseEntity<List<Location>> getTouristDestinations() {
        List<Location> touristDestinations = locationService.findTouristDestinations();
        return ResponseEntity.ok(touristDestinations);
    }

    // // [DONE] GET /api/locations/{id}/characters - Get all characters at location
    @GetMapping("/{id}/characters")
    public ResponseEntity<List<Character>> getLocationCharacters(@PathVariable Long id) {
        List<Character> characters = locationService.getLocationCharacters(id);
        return ResponseEntity.ok(characters);
    }

    // // [DONE] GET /api/locations/{id}/events - Get all events at location
    @GetMapping("/{id}/events")
    public ResponseEntity<List<Event>> getLocationEvents(@PathVariable Long id) {
        List<Event> events = locationService.getLocationEvents(id);
        return ResponseEntity.ok(events);
    }

    // // [DONE] GET /api/locations/{id}/stats - Get location statistics
    @GetMapping("/{id}/stats")
    public ResponseEntity<LocationStatsResponse> getLocationStats(@PathVariable Long id) {
        Optional<LocationStatsResponse> stats = locationService.getLocationStats(id);
        return stats.map(ResponseEntity::ok)
                   .orElse(ResponseEntity.notFound().build());
    }

    // // [DONE] POST /api/locations/{id}/coordinates - Update location coordinates
    @PostMapping("/{id}/coordinates")
    public ResponseEntity<Location> updateLocationCoordinates(
            @PathVariable Long id,
            @Valid @RequestBody CoordinatesUpdateRequest request
    ) {
        try {
            Optional<Location> updatedLocation = locationService.updateCoordinates(id, request);
            return updatedLocation.map(ResponseEntity::ok)
                                 .orElse(ResponseEntity.notFound().build());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }
}
