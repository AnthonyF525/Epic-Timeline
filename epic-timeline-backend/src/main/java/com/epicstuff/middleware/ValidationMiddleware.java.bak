package com.epicstuff.middleware;

import com.epicstuff.validation.EpicTimelineSchemaValidator;
import com.epicstuff.validation.ValidationResult;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import jakarta.servlet.http.HttpServletRequest;  // Fixed: jakarta instead of javax
import jakarta.servlet.http.HttpServletResponse; // Fixed: jakarta instead of javax
import java.io.BufferedReader;
import java.io.IOException;
import java.util.stream.Collectors;

@Component
public class ValidationMiddleware implements HandlerInterceptor {

    @Autowired
    private EpicTimelineSchemaValidator schemaValidator;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        
        // ✅ Only validate POST and PUT requests
        String method = request.getMethod();
        if (!"POST".equals(method) && !"PUT".equals(method)) {
            return true;
        }

        // ✅ Only validate Epic Timeline API endpoints
        String uri = request.getRequestURI();
        if (!uri.startsWith("/api/")) {
            return true;
        }

        // ✅ Extract request body
        String requestBody = getRequestBody(request);
        if (requestBody == null || requestBody.trim().isEmpty()) {
            return true;
        }

        // ✅ Determine validation schema based on endpoint
        ValidationResult result = validateRequest(uri, method, requestBody);

        // ✅ Handle validation results
        if (result.hasErrors()) {
            sendValidationError(response, result);
            return false;
        }

        // ✅ Log warnings but allow request to continue
        if (result.hasWarnings()) {
            logValidationWarnings(uri, result);
        }

        return true;
    }

    private ValidationResult validateRequest(String uri, String method, String requestBody) {
        try {
            Object requestObject = objectMapper.readValue(requestBody, Object.class);
            
            // ✅ Character validation
            if (uri.contains("/api/characters")) {
                if ("POST".equals(method)) {
                    ValidationResult schemaResult = schemaValidator.validateCharacterCreateRequest(requestObject);
                    if (schemaResult.hasErrors()) return schemaResult;
                    
                    return schemaValidator.validateEpicTimelineBusinessRules("character", requestObject);
                } else if ("PUT".equals(method)) {
                    ValidationResult schemaResult = schemaValidator.validateCharacterUpdateRequest(requestObject);
                    if (schemaResult.hasErrors()) return schemaResult;
                    
                    return schemaValidator.validateEpicTimelineBusinessRules("character", requestObject);
                }
            }
            
            // ✅ Location validation
            if (uri.contains("/api/locations")) {
                if ("POST".equals(method)) {
                    ValidationResult schemaResult = schemaValidator.validateLocationCreateRequest(requestObject);
                    if (schemaResult.hasErrors()) return schemaResult;
                    
                    return schemaValidator.validateEpicTimelineBusinessRules("location", requestObject);
                } else if ("PUT".equals(method)) {
                    ValidationResult schemaResult = schemaValidator.validateLocationUpdateRequest(requestObject);
                    if (schemaResult.hasErrors()) return schemaResult;
                    
                    return schemaValidator.validateEpicTimelineBusinessRules("location", requestObject);
                }
            }
            
            // ✅ Event validation
            if (uri.contains("/api/events")) {
                if ("POST".equals(method)) {
                    return schemaValidator.validateEventCreateRequest(requestObject);
                } else if ("PUT".equals(method)) {
                    return schemaValidator.validateEventUpdateRequest(requestObject);
                }
            }
            
            // ✅ Song validation
            if (uri.contains("/api/songs")) {
                if ("POST".equals(method)) {
                    return schemaValidator.validateSongCreateRequest(requestObject);
                } else if ("PUT".equals(method)) {
                    return schemaValidator.validateSongUpdateRequest(requestObject);
                }
            }
            
            // ✅ Comparison validation
            if (uri.contains("/api/comparisons")) {
                if ("POST".equals(method)) {
                    ValidationResult schemaResult = schemaValidator.validateComparisonCreateRequest(requestObject);
                    if (schemaResult.hasErrors()) return schemaResult;
                    
                    return schemaValidator.validateEpicTimelineBusinessRules("comparison", requestObject);
                } else if ("PUT".equals(method)) {
                    ValidationResult schemaResult = schemaValidator.validateComparisonUpdateRequest(requestObject);
                    if (schemaResult.hasErrors()) return schemaResult;
                    
                    return schemaValidator.validateEpicTimelineBusinessRules("comparison", requestObject);
                }
            }
            
            // ✅ Saga validation
            if (uri.contains("/api/sagas")) {
                if ("POST".equals(method)) {
                    return schemaValidator.validateSagaCreateRequest(requestObject);
                } else if ("PUT".equals(method)) {
                    return schemaValidator.validateSagaUpdateRequest(requestObject);
                }
            }
            
            return ValidationResult.success();
            
        } catch (Exception e) {
            return ValidationResult.failure("Request parsing error: " + e.getMessage());
        }
    }

    // ✅ Extract request body from HttpServletRequest
    private String getRequestBody(HttpServletRequest request) {
        try {
            BufferedReader reader = request.getReader();
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        } catch (IOException e) {
            return null;
        }
    }

    // ✅ Send validation error response
    private void sendValidationError(HttpServletResponse response, ValidationResult result) throws IOException {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        response.setContentType("application/json");
        
        ValidationErrorResponse errorResponse = ValidationErrorResponse.builder()
            .status("validation_failed")
            .message("Request validation failed")
            .errors(result.getErrors())
            .warnings(result.getWarnings())
            .timestamp(System.currentTimeMillis())
            .build();
        
        String jsonResponse = objectMapper.writeValueAsString(errorResponse);
        response.getWriter().write(jsonResponse);
    }

    // ✅ Log validation warnings
    private void logValidationWarnings(String uri, ValidationResult result) {
        System.out.println("VALIDATION WARNINGS for " + uri + ": " + result.getWarnings());
    }
}